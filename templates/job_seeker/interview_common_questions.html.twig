<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Common Interview Questions{% endblock %}</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #d62828;
            --secondary-color: #ba181b;
            --accent-color: #e5383b;
            --light-color: #f5f3f4;
            --white: #ffffff;
            --dark: #161a1d;
            --medium-gray: #b1a7a6;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-color);
            color: var(--dark);
            min-height: 100vh;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar - Style inspiré du welcome-panel */
        .sidebar {
            width: 300px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            padding: 2rem;
            position: relative;
            overflow: hidden;
            box-shadow: var(--shadow);
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('https://images.unsplash.com/photo-1521791136064-7986c2920216?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') center/cover;
            opacity: 0.15;
            z-index: 0;
        }

        .profile-section {
            position: relative;
            z-index: 1;
            text-align: center;
            margin-bottom: 2rem;
        }

        .profile-img {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid rgba(255, 255, 255, 0.2);
            margin-bottom: 1rem;
        }

        .profile-name {
            color: var(--white);
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .profile-email {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9rem;
        }

        .nav-menu {
            position: relative;
            z-index: 1;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--white);
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            transition: var(--transition);
            position: relative;
        }

        .nav-item i {
            margin-right: 0.75rem;
            font-size: 1.1rem;
            width: 20px;
            text-align: center;
        }

        .nav-item.active {
            background: rgba(255, 255, 255, 0.2);
            font-weight: 600;
        }

        .nav-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .badge {
            background: var(--white);
            color: var(--primary-color);
            font-size: 0.7rem;
            font-weight: 600;
            padding: 0.1rem 0.5rem;
            border-radius: 10px;
            margin-left: auto;
        }

        /* Main Content - Style inspiré du register-panel */
        .main-content {
            flex: 1;
            padding: 2rem;
            background-color: var(--white);
            overflow-y: auto;
        }

        .welcome-card {
            background: var(--light-color);
            border-radius: 15px;
            padding: 2.5rem;
            box-shadow: var(--shadow);
            margin-bottom: 2rem;
            position: relative;
        }

        .welcome-title {
            font-size: 2rem;
            font-weight: 700;
            color: var(--dark);
            position: relative;
            display: inline-block;
            margin-bottom: 1.5rem;
        }

        .welcome-title::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 0;
            width: 50px;
            height: 4px;
            background: var(--primary-color);
            border-radius: 2px;
        }

        .welcome-subtitle {
            color: var(--medium-gray);
            margin-bottom: 1.5rem;
        }

        .btn-primary {
            display: inline-block;
            background: var(--primary-color);
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            text-decoration: none;
            font-weight: 600;
            transition: background 0.3s ease;
            text-align: center;
        }

        .btn-primary:hover {
            background: var(--secondary-color);
        }

        .btn-secondary {
            display: inline-block;
            background: var(--light-color);
            color: var(--dark);
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            text-align: center;
            border: 1px solid var(--medium-gray);
        }

        .btn-secondary:hover {
            background: var(--medium-gray);
            color: var(--white);
        }

        /* Questions Container */
        .questions-container {
            margin-top: 2rem;
            opacity: 0;
            transform: translateY(20px);
            transition: all 0.5s ease;
        }
        
        .questions-filter {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
        }
        
        .filter-btn {
            padding: 0.5rem 1rem;
            background: var(--light-color);
            border: none;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-family: 'Poppins', sans-serif;
        }
        
        .filter-btn.active {
            background: var(--primary-color);
            color: white;
        }
        
        .questions-list {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }
        
        .question-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            opacity: 0;
            transform: translateY(20px);
        }
        
        .question-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }
        
        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        
        .question-text {
            font-size: 1.2rem;
            color: var(--dark);
        }
        
        .question-difficulty {
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .question-difficulty.easy {
            background: #e6f7e6;
            color: #28a745;
        }
        
        .question-difficulty.medium {
            background: #fff3cd;
            color: #856404;
        }
        
        .question-difficulty.hard {
            background: #f8d7da;
            color: #721c24;
        }
        
        .question-tips, .question-example {
            margin-bottom: 1rem;
        }
        
        .question-tips h4, .question-example h4 {
            font-size: 1rem;
            margin-bottom: 0.5rem;
            color: var(--dark);
        }
        
        .question-actions {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .btn-practice, .btn-save {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            font-family: 'Poppins', sans-serif;
        }
        
        .btn-practice {
            background: var(--primary-color);
            color: white;
        }
        
        .btn-practice:hover {
            background: var(--secondary-color);
        }
        
        .btn-save {
            background: var(--light-color);
            color: var(--dark);
        }
        
        .btn-save:hover {
            background: var(--medium-gray);
            color: white;
        }
        
        .no-questions {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            text-align: center;
            box-shadow: var(--shadow);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .dashboard-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-radius: 0;
                padding: 1.5rem;
            }
            
            .main-content {
                padding: 1.5rem;
            }
            
            .profile-img {
                width: 100px;
                height: 100px;
            }
            
            .welcome-card {
                padding: 1.5rem;
            }
            
            .question-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 0.5rem;
            }
            
            .question-actions {
                flex-direction: column;
            }
        }

        @media (max-width: 576px) {
            .questions-filter {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
<div class="dashboard-container">
    <!-- Sidebar - Style inspiré du welcome-panel -->
    <div class="sidebar">
        <div class="profile-section">
            {% if app.user.profileImage %}
                <img src="{{ asset(app.user.profileImage) }}" alt="Profile" class="profile-img">
            {% else %}
                <img src="{{ asset('img/fxchat.png') }}" alt="Profile" class="profile-img">
            {% endif %}
            <h3 class="profile-name">{{ app.user.username }}</h3>
            <p class="profile-email">{{ app.user.email }}</p>
        </div>
        
        <div class="nav-menu">
            <a href="{{ path('job_seeker_home') }}" class="nav-item">
                <i class="fas fa-home"></i> Dashboard
            </a>
            <a href="{{ path('job_seeker_profile_index') }}" class="nav-item">
                <i class="fas fa-user-edit"></i> Edit Profile
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-file-alt"></i> My CV
            </a>
            <a href="{{ path('job_seeker_interviews_index') }}" class="nav-item active">
                <i class="fas fa-comments"></i> Interviews
            </a>
            <a href="{{ path('job_seeker_messages_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                <span class="badge">3</span>
            </a>
            <a href="{{ path('job_seeker_jobs_index') }}" class="nav-item">
                <i class="fas fa-briefcase"></i> Job Offers
            </a>
            <a href="{{ path('conversation_index') }}" class="nav-item">
                <i class="fas fa-envelope"></i> Messages
                {% set unread_count = unread_messages_count() %}
                {% if unread_count > 0 %}
                    <span class="badge">{{ unread_count }}</span>
                {% endif %}
            </a>
            
            <a href="{{ path('chatbot') }}" class="nav-item">
                <i class="fas fa-robot"></i> Assistant Tchala
            </a>
            
            <a href="{{ path('app_logout') }}" class="nav-item">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="welcome-card">
            <h1 class="welcome-title">Common Interview Questions</h1>
            <p class="welcome-subtitle">Practice answering these frequently asked questions to prepare for your interviews</p>
            <a href="{{ path('job_seeker_interviews_index') }}" class="btn-secondary"><i class="fas fa-arrow-left"></i> Back to Preparation</a>
        </div>
        
        <div class="questions-container">
            <div class="questions-filter">
                <button class="filter-btn active" data-filter="all">All Questions</button>
                <button class="filter-btn" data-filter="general">General</button>
                <button class="filter-btn" data-filter="experience">Experience</button>
                <button class="filter-btn" data-filter="skills">Skills</button>
                <button class="filter-btn" data-filter="motivation">Motivation</button>
            </div>
            
            <div class="questions-list">
                {% if questions|length > 0 %}
                    {% for question in questions %}
                        <div class="question-card" data-category="{{ question.subCategory }}" data-id="{{ question.id|default(loop.index) }}">
                            <div class="question-header">
                                <h3 class="question-text">{{ question.text }}</h3>
                                <div class="question-difficulty {{ question.difficulty }}">
                                    {{ question.difficulty|capitalize }}
                                </div>
                            </div>
                            
                            <div class="question-tips">
                                <h4>Tips for answering:</h4>
                                <p>{{ question.tips }}</p>
                            </div>
                            
                            <div class="question-example">
                                <h4>Example answer:</h4>
                                <p>{{ question.exampleAnswer }}</p>
                            </div>
                            
                            <div class="card-actions">
                                <a href="{{ path('job_seeker_interview_practice_question', {'id': question.id|default(loop.index)}) }}" class="btn btn-primary">
                                    <i class="fas fa-microphone"></i> Practice
                                </a>
                                
                                <button class="btn-save {% if question.is_saved is defined and question.is_saved %}saved{% endif %}" data-id="{{ question.id|default(loop.index) }}">
                                    <i class="fas {% if question.is_saved is defined and question.is_saved %}fa-bookmark{% else %}fa-bookmark-o{% endif %}"></i>
                                    {% if question.is_saved is defined and question.is_saved %}Saved{% else %}Save{% endif %}
                                </button>
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle"></i> No questions available at the moment.
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement
        const animateElements = function() {
            // Animer le conteneur de questions
            const questionsContainer = document.querySelector('.questions-container');
            questionsContainer.style.opacity = '1';
            questionsContainer.style.transform = 'translateY(0)';
            
            // Animer les cartes de questions avec un délai séquentiel
            const questionCards = document.querySelectorAll('.question-card');
            questionCards.forEach((card, index) => {
                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 100 * index);
            });
        };

        // Exécuter l'animation après un court délai
        setTimeout(animateElements, 300);

        // Filter functionality
        const filterButtons = document.querySelectorAll('.filter-btn');
        const questionCards = document.querySelectorAll('.question-card');
        
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove active class from all buttons
                filterButtons.forEach(btn => btn.classList.remove('active'));
                
                // Add active class to clicked button
                this.classList.add('active');
                
                const filter = this.getAttribute('data-filter');
                
                // Show/hide questions based on filter
                questionCards.forEach(card => {
                    if (filter === 'all' || card.getAttribute('data-category') === filter) {
                        card.style.display = 'block';
                        // Réanimer les cartes visibles
                        setTimeout(() => {
                            card.style.opacity = '1';
                            card.style.transform = 'translateY(0)';
                        }, 100);
                    } else {
                        card.style.opacity = '0';
                        card.style.transform = 'translateY(20px)';
                        setTimeout(() => {
                            card.style.display = 'none';
                        }, 300);
                    }
                });
            });
        });
        
        // Practice button functionality
        const practiceButtons = document.querySelectorAll('.btn-practice');
        practiceButtons.forEach(button => {
            button.addEventListener('click', function() {
                const questionCard = this.closest('.question-card');
                const questionId = questionCard.getAttribute('data-id');
                
                // Rediriger vers la page de pratique avec l'ID de la question
                window.location.href = `/job-seeker/interviews/practice/${questionId}`;
            });
        });
        
        // Save button functionality
        const saveButtons = document.querySelectorAll('.btn-save');
        saveButtons.forEach(button => {
            button.addEventListener('click', function() {
                const questionCard = this.closest('.question-card');
                const questionText = questionCard.querySelector('.question-text').textContent;
                
                // Here you would implement saving to the user's list
                alert(`Question saved to your list: ${questionText}`);
                // In a real implementation, you would make an AJAX call to save this to the user's profile
            });
        });
    });
</script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Animation des éléments au chargement
        const animateElements = function() {
            // Animer le conteneur de questions
            const questionsContainer = document.querySelector('.questions-container');
            questionsContainer.style.opacity = '1';
            questionsContainer.style.transform = 'translateY(0)';
            
            // Animer les cartes de questions avec un délai séquentiel
            const questionCards = document.querySelectorAll('.question-card');
            questionCards.forEach((card, index) => {
                setTimeout(() => {
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, 100 * index);
            });
        };

        // Exécuter l'animation après un court délai
        setTimeout(animateElements, 300);

        // Filter functionality
        const filterButtons = document.querySelectorAll('.filter-btn');
        const questionCards = document.querySelectorAll('.question-card');
        
        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove active class from all buttons
                filterButtons.forEach(btn => btn.classList.remove('active'));
                
                // Add active class to clicked button
                this.classList.add('active');
                
                const filter = this.getAttribute('data-filter');
                
                // Show/hide questions based on filter
                questionCards.forEach(card => {
                    if (filter === 'all' || card.getAttribute('data-category') === filter) {
                        card.style.display = 'block';
                        // Réanimer les cartes visibles
                        setTimeout(() => {
                            card.style.opacity = '1';
                            card.style.transform = 'translateY(0)';
                        }, 100);
                    } else {
                        card.style.opacity = '0';
                        card.style.transform = 'translateY(20px)';
                        setTimeout(() => {
                            card.style.display = 'none';
                        }, 300);
                    }
                });
            });
        });
        
        // Practice button functionality
        const practiceButtons = document.querySelectorAll('.btn-practice');
        practiceButtons.forEach(button => {
            button.addEventListener('click', function() {
                const questionCard = this.closest('.question-card');
                const questionId = questionCard.getAttribute('data-id');
                
                // Rediriger vers la page de pratique avec l'ID de la question
                window.location.href = `/job-seeker/interviews/practice/${questionId}`;
            });
        });
        
        // Save button functionality
        const saveButtons = document.querySelectorAll('.btn-save');
        saveButtons.forEach(button => {
            button.addEventListener('click', function() {
                const questionCard = this.closest('.question-card');
                const questionText = questionCard.querySelector('.question-text').textContent;
                
                // Here you would implement saving to the user's list
                alert(`Question saved to your list: ${questionText}`);
                // In a real implementation, you would make an AJAX call to save this to the user's profile
            });
        });
    });
</script>

<style>
    .questions-container {
        margin-top: 2rem;
    }
    
    .questions-filter {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }
    
    .filter-btn {
        padding: 0.5rem 1rem;
        background: var(--light-color);
        border: none;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        font-family: 'Poppins', sans-serif;
    }
    
    .filter-btn.active {
        background: var(--primary-color);
        color: white;
    }
    
    .questions-list {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }
    
    .question-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: var(--shadow);
        transition: all 0.3s ease;
        opacity: 0;
        transform: translateY(20px);
    }
    
    .question-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
    }
    
    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }
    
    .question-text {
        font-size: 1.2rem;
        color: var(--dark);
    }
    
    .question-difficulty {
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
    }
    
    .question-difficulty.easy {
        background: #e6f7e6;
        color: #28a745;
    }
    
    .question-difficulty.medium {
        background: #fff3cd;
        color: #856404;
    }
    
    .question-difficulty.hard {
        background: #f8d7da;
        color: #721c24;
    }
    
    .question-tips, .question-example {
        margin-bottom: 1rem;
    }
    
    .question-tips h4, .question-example h4 {
        font-size: 1rem;
        margin-bottom: 0.5rem;
        color: var(--dark);
    }
    
    .question-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }
    
    .btn-practice, .btn-save {
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: 600;
        transition: all 0.3s ease;
        font-family: 'Poppins', sans-serif;
    }
    
    .btn-practice {
        background: var(--primary-color);
        color: white;
    }
    
    .btn-practice:hover {
        background: var(--secondary-color);
    }
    
    .btn-save {
        background: var(--light-color);
        color: var(--dark);
    }
    
    .btn-save:hover {
        background: var(--medium-gray);
        color: white;
    }
    
    .no-questions {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        text-align: center;
        box-shadow: var(--shadow);
    }

    /* Responsive Design */
    @media (max-width: 992px) {
        .dashboard-container {
            flex-direction: column;
        }
        
        .sidebar {
            width: 100%;
            border-radius: 0;
            padding: 1.5rem;
        }
        
        .main-content {
            padding: 1.5rem;
        }
        
        .profile-img {
            width: 100px;
            height: 100px;
        }
        
        .welcome-card {
            padding: 1.5rem;
        }
        
        .question-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }
        
        .question-actions {
            flex-direction: column;
        }
    }

    @media (max-width: 576px) {
        .questions-filter {
            justify-content: center;
        }
    }
</style>


