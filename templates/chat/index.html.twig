{# templates/chat/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Chat Application{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        :root {
            --primary-color: #ff4d4d;
            --secondary-color: #e9ecef;
            --text-dark: #212529;
            --text-light: #f8f9fa;
        }
        
        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-width: 1200px;
            margin: 0 auto;
            background-color: white;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        
        .chat-header {
            background-color: white;
            padding: 15px 20px;
            border-bottom: 1px solid #eee;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        
        .chat-header h2 {
            margin: 0;
            color: var(--primary-color);
        }
        
        .user-info {
            display: flex;
            align-items: center;
        }
        
        .user-info img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        #chat-area {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background-color: #f8f9fa;
            background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M30 30 Q50 20 70 30 T90 30' fill='none' stroke='%23e0e0e0' stroke-width='0.5' opacity='0.3'/%3E%3C/svg%3E");
            background-size: 200px 200px;
        }
        
        .message {
            margin-bottom: 15px;
            max-width: 70%;
            padding: 12px 16px;
            border-radius: 18px;
            position: relative;
            animation: fadeIn 0.3s ease-out;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        
        .user-message {
            background: linear-gradient(135deg, var(--primary-color) 0%, #cc0000 100%);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }
        
        .other-message {
            background: var(--secondary-color);
            color: var(--text-dark);
            margin-right: auto;
            border-bottom-left-radius: 4px;
            border: 1px solid #dee2e6;
        }
        
        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: baseline;
            margin-bottom: 5px;
        }
        
        .message-sender {
            font-weight: bold;
            font-size: 0.9em;
        }
        
        .user-message .message-sender {
            color: rgba(255,255,255,0.9);
        }
        
        .other-message .message-sender {
            color: var(--primary-color);
        }
        
        .message-time {
            font-size: 0.75em;
            opacity: 0.7;
            margin-left: 10px;
        }
        
        .message-content {
            word-wrap: break-word;
            line-height: 1.4;
        }
        
        .voice-message {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        
        .voice-message button {
            background: none;
            border: none;
            font-size: 1.5em;
            cursor: pointer;
            margin-right: 10px;
            color: inherit;
        }
        
        .voice-wave {
            display: inline-block;
            letter-spacing: 1px;
            color: currentColor;
        }
        
        .chat-footer {
            background-color: white;
            padding: 15px;
            border-top: 1px solid #eee;
        }
        
        .message-form {
            display: flex;
            align-items: center;
        }
        
        #message-form textarea {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid #ced4da;
            border-radius: 20px;
            margin-right: 10px;
            font-size: 1em;
            outline: none;
            transition: all 0.3s;
            resize: none;
            height: 45px;
            max-height: 120px;
        }
        
        #message-form textarea:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(255,77,77,0.25);
        }
        
        #record-button {
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            margin-right: 10px;
            transition: all 0.3s;
        }
        
        #record-button:hover {
            transform: scale(1.05);
        }
        
        #record-button.recording {
            animation: pulse 1.5s infinite;
        }
        
        #send-button {
            background: linear-gradient(135deg, var(--primary-color) 0%, #cc0000 100%);
            color: white;
            border: none;
            border-radius: 20px;
            padding: 10px 20px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
        }
        
        #send-button:hover {
            background: linear-gradient(135deg, #e60000 0%, #b30000 100%);
            transform: translateY(-2px);
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .chat-container {
                height: 100vh;
                max-width: 100%;
            }
            
            .message {
                max-width: 85%;
            }
        }
    </style>
{% endblock %}

{% block body %}
<div class="chat-container">
    <div class="chat-header">
        <h2>Chat Application</h2>
        <div class="user-info">
            <img src="{{ asset('images/default-avatar.png') }}" alt="User Avatar">
            <span>{{ app.user.username }}</span>
        </div>
    </div>
    
    <div id="chat-area">
        {% for message in messages|reverse %}
            <div class="message {% if message.sender == app.user.username %}user-message{% else %}other-message{% endif %}" data-id="{{ message.id }}">
                <div class="message-header">
                    <span class="message-sender">{{ message.sender }}</span>
                    <span class="message-time">{{ message.createdAt|date('H:i') }}</span>
                </div>
                <div class="message-content">
                    {% if message.isVoiceMessage() %}
                        <div class="voice-message" onclick="playVoiceMessage('{{ message.voiceFilePath }}')">
                            <button>▶</button>
                            <span class="voice-wave">⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯</span>
                        </div>
                    {% else %}
                        {{ message.content }}
                    {% endif %}
                </div>
            </div>
        {% endfor %}
    </div>
    
    <div class="chat-footer">
        {{ form_start(form, {
            'attr': {
                'id': 'message-form',
                'class': 'message-form',
                'enctype': 'multipart/form-data'
            }
        }) }}
            <button type="button" id="record-button" title="Enregistrer un message vocal">
                <i class="fas fa-microphone"></i>
            </button>
            {{ form_widget(form.content, {
                'attr': {
                    'id': 'message-input',
                    'placeholder': 'Tapez votre message...'
                }
            }) }}
            {{ form_widget(form.voiceFile, {
                'attr': {
                    'id': 'voice-input',
                    'class': 'd-none'
                }
            }) }}
            <button type="submit" id="send-button">Envoyer</button>
        {{ form_end(form) }}
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const chatArea = document.getElementById('chat-area');
            const messageForm = document.getElementById('message-form');
            const messageInput = document.getElementById('message-input');
            const recordButton = document.getElementById('record-button');
            const voiceInput = document.getElementById('voice-input');
            
            let mediaRecorder;
            let audioChunks = [];
            let isRecording = false;
            let audioContext;
            let audioBufferSource;
            
            // Initial scroll to bottom
            chatArea.scrollTop = chatArea.scrollHeight;
            
            // Auto-resize textarea
            messageInput.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });
            
            // Handle form submission
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData(this);
                
                fetch('{{ path('chat_api_send') }}', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        addMessageToChat(data.message);
                        messageForm.reset();
                        messageInput.style.height = '45px';
                        chatArea.scrollTop = chatArea.scrollHeight;
                    }
                })
                .catch(error => console.error('Error:', error));
            });
            
            // Handle voice recording
            recordButton.addEventListener('click', async function() {
                if (!isRecording) {
                    try {
                        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                        mediaRecorder = new MediaRecorder(stream);
                        audioChunks = [];
                        
                        mediaRecorder.ondataavailable = event => {
                            audioChunks.push(event.data);
                        };
                        
                        mediaRecorder.onstop = async () => {
                            const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                            const audioFile = new File([audioBlob], 'recording.wav', { type: 'audio/wav' });
                            
                            const dataTransfer = new DataTransfer();
                            dataTransfer.items.add(audioFile);
                            voiceInput.files = dataTransfer.files;
                            
                            // Trigger form submission
                            messageForm.dispatchEvent(new Event('submit'));
                        };
                        
                        mediaRecorder.start();
                        isRecording = true;
                        recordButton.classList.add('recording');
                        recordButton.innerHTML = '<i class="fas fa-stop"></i>';
                        
                    } catch (error) {
                        console.error('Error accessing microphone:', error);
                        alert('Microphone access denied. Please allow microphone access to send voice messages.');
                    }
                } else {
                    mediaRecorder.stop();
                    mediaRecorder.stream.getTracks().forEach(track => track.stop());
                    isRecording = false;
                    recordButton.classList.remove('recording');
                    recordButton.innerHTML = '<i class="fas fa-microphone"></i>';
                }
            });
            
            // Play voice message
            window.playVoiceMessage = function(filename) {
                if (audioBufferSource) {
                    audioBufferSource.stop();
                }
                
                audioContext = audioContext || new (window.AudioContext || window.webkitAudioContext)();
                
                fetch('{{ path('chat_play_voice', {'filename': 'FILE_PLACEHOLDER'}) }}'.replace('FILE_PLACEHOLDER', filename))
                    .then(response => response.arrayBuffer())
                    .then(arrayBuffer => audioContext.decodeAudioData(arrayBuffer))
                    .then(audioBuffer => {
                        audioBufferSource