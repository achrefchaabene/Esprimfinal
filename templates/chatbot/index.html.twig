<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chatbot Esprit - Esprit</title>
  
  <!-- Favicons -->
  <link href="/img/favicon.png" rel="icon">
  
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Playfair+Display:wght@400;500;600&display=swap" rel="stylesheet">
  
  <!-- Font Awesome -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  
  <style>
    :root {
      --primary-red: #d62828;
      --dark-red: #ba181b;
      --light-red: #ff6b6b;
      --gray-100: #f8f9fa;
      --gray-200: #e9ecef;
      --gray-300: #dee2e6;
      --gray-500: #adb5bd;
      --gray-700: #495057;
      --gray-900: #212529;
      --sidebar-width: 280px;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Montserrat', sans-serif;
      background-color: var(--gray-100);
      color: var(--gray-900);
      overflow-x: hidden;
      height: 100vh;
    }

    /* Layout Structure */
    .chat-app-container {
      display: flex;
      height: 100vh;
    }

    /* Sidebar Historique */
    .chat-history-sidebar {
      width: var(--sidebar-width);
      background-color: white;
      border-right: 1px solid var(--gray-300);
      height: 100vh;
      position: fixed;
      top: 0;
      left: 0;
      z-index: 100;
      box-shadow: 2px 0 10px rgba(0,0,0,0.05);
      display: flex;
      flex-direction: column;
    }

    .sidebar-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--gray-200);
    }

    .sidebar-header h4 {
      color: var(--gray-900);
      font-size: 1.25rem;
      margin-bottom: 1rem;
    }

    .btn-new-chat {
      background: var(--primary-red);
      color: white;
      border: none;
      padding: 0.75rem 1rem;
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      font-size: 0.95rem;
      cursor: pointer;
      transition: all 0.3s;
      width: 100%;
    }

    .btn-new-chat:hover {
      background: var(--dark-red);
      transform: translateY(-2px);
    }

    .history-list {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
    }

    .history-item {
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 0.75rem;
      cursor: pointer;
      transition: all 0.2s;
      position: relative;
    }

    .history-item:hover {
      background-color: var(--gray-100);
    }

    .history-item.active {
      background-color: rgba(214, 40, 40, 0.1);
      border-left: 3px solid var(--primary-red);
    }

    .history-item.active::after {
      content: '';
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      width: 8px;
      height: 8px;
      background-color: var(--primary-red);
      border-radius: 50%;
    }

    .history-preview {
      font-size: 0.95rem;
      color: var(--gray-900);
      margin-bottom: 0.25rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .history-time {
      font-size: 0.8rem;
      color: var(--gray-500);
    }

    /* Main Chat Area */
    .main-chat-area {
      flex: 1;
      margin-left: var(--sidebar-width);
      height: 100vh;
      display: flex;
      flex-direction: column;
    }

    /* Chat Header */
    .chat-header {
      padding: 1.25rem 2rem;
      background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
      color: white;
      display: flex;
      align-items: center;
      gap: 1.5rem;
      position: sticky;
      top: 0;
      z-index: 90;
    }

    .chatbot-avatar {
      width: 42px;
      height: 42px;
      background-color: rgba(255,255,255,0.2);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.25rem;
    }

    .chat-title {
      flex: 1;
    }

    .chat-title h3 {
      margin: 0;
      font-size: 1.25rem;
      font-weight: 600;
    }

    .chat-title small {
      font-size: 0.85rem;
      opacity: 0.9;
    }

    .status-indicator {
      position: relative;
      width: 14px;
      height: 14px;
      border-radius: 50%;
      background-color: #4ade80;
    }

    .status-indicator::after {
      content: '';
      position: absolute;
      width: 18px;
      height: 18px;
      border-radius: 50%;
      background-color: rgba(74, 222, 128, 0.3);
      top: -2px;
      left: -2px;
      animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
      0% { transform: scale(0.8); opacity: 1; }
      100% { transform: scale(1.5); opacity: 0; }
    }

    /* Messages Container */
    .chat-messages-container {
      flex: 1;
      padding: 2rem;
      overflow-y: auto;
      background-color: var(--gray-100);
      background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23e9ecef' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E");
    }

    /* Messages */
    .message-container {
      margin-bottom: 1.5rem;
      animation: fadeIn 0.3s ease-out;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .chat-message {
      max-width: 75%;
      padding: 1rem 1.25rem;
      border-radius: 12px;
      font-size: 0.95rem;
      line-height: 1.5;
      word-wrap: break-word;
      position: relative;
      box-shadow: 0 2px 12px rgba(0,0,0,0.08);
    }

    .user {
      margin-left: auto;
      background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
      color: white;
      border-bottom-right-radius: 4px;
    }

    .bot {
      margin-right: auto;
      background-color: white;
      color: var(--gray-900);
      border-bottom-left-radius: 4px;
      border-left: 3px solid var(--primary-red);
    }

    .chat-content {
      font-family: inherit;
    }

    .chat-content strong {
      font-weight: 600;
      color: var(--primary-red);
    }

    .chat-content em {
      font-style: italic;
    }

    .chat-content ul, .chat-content ol {
      padding-left: 1.5rem;
      margin: 0.5rem 0;
    }

    .chat-meta {
      font-size: 0.75rem;
      margin-top: 0.5rem;
      text-align: right;
    }

    .user .chat-meta {
      color: rgba(255,255,255,0.7);
    }

    .bot .chat-meta {
      color: var(--gray-500);
    }

    /* Input Area */
    .chat-input-area {
      padding: 1.5rem;
      background-color: white;
      border-top: 1px solid var(--gray-200);
      position: sticky;
      bottom: 0;
    }

    .input-group {
      border-radius: 24px;
      overflow: hidden;
      border: 1px solid var(--gray-200);
      transition: all 0.3s;
      display: flex;
    }

    .input-group:focus-within {
      border-color: var(--primary-red);
      box-shadow: 0 0 0 3px rgba(214, 40, 40, 0.1);
    }

    #message-input {
      flex: 1;
      border: none;
      padding: 0.75rem 1.25rem;
      font-size: 0.95rem;
    }

    #message-input:focus {
      outline: none;
    }

    .btn-send {
      background: linear-gradient(135deg, var(--primary-red), var(--dark-red));
      color: white;
      border: none;
      padding: 0 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.3s;
      cursor: pointer;
    }

    .btn-send:hover {
      background: linear-gradient(135deg, var(--dark-red), #a31515);
    }

    .btn-send .send-text {
      font-size: 0.95rem;
    }

    .btn-send .send-icon {
      display: none;
    }

    .input-footer {
      text-align: center;
      margin-top: 0.75rem;
    }

    .input-footer small {
      color: var(--gray-500);
      font-size: 0.8rem;
    }

    /* Typing indicator */
    .typing-indicator {
      display: inline-block;
      padding: 0.75rem 1.25rem;
      background: white;
      border-radius: 12px;
      margin-bottom: 1rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .typing-indicator span {
      height: 8px;
      width: 8px;
      background: var(--primary-red);
      border-radius: 50%;
      display: inline-block;
      margin: 0 2px;
      animation: bounce 1.5s infinite ease-in-out;
    }

    .typing-indicator span:nth-child(2) {
      animation-delay: 0.2s;
    }

    .typing-indicator span:nth-child(3) {
      animation-delay: 0.4s;
    }

    @keyframes bounce {
      0%, 60%, 100% { transform: translateY(0); }
      30% { transform: translateY(-5px); }
    }

    /* Responsive Design */
    @media (max-width: 992px) {
      .chat-history-sidebar {
        transform: translateX(-100%);
        transition: transform 0.3s ease;
      }

      .chat-history-sidebar.active {
        transform: translateX(0);
      }

      .main-chat-area {
        margin-left: 0;
      }

      .btn-toggle-sidebar {
        display: block;
        background: none;
        border: none;
        color: white;
        font-size: 1.25rem;
        cursor: pointer;
      }

      .btn-send .send-text {
        display: none;
      }

      .btn-send .send-icon {
        display: block;
      }
    }

    @media (max-width: 576px) {
      .chat-message {
        max-width: 85%;
      }

      .chat-header {
        padding: 1rem;
      }

      .chat-messages-container {
        padding: 1.5rem;
      }

      .chat-input-area {
        padding: 1rem;
      }
    }

    /* Styles pour l'indicateur de frappe */
    .typing-indicator {
      display: flex;
      align-items: center;
    }
    
    .typing-indicator span {
      height: 8px;
      width: 8px;
      float: left;
      margin: 0 1px;
      background-color: #9E9EA1;
      display: block;
      border-radius: 50%;
      opacity: 0.4;
    }
    
    .typing-indicator span:nth-of-type(1) {
      animation: 1s blink infinite 0.3333s;
    }
    
    .typing-indicator span:nth-of-type(2) {
      animation: 1s blink infinite 0.6666s;
    }
    
    .typing-indicator span:nth-of-type(3) {
      animation: 1s blink infinite 0.9999s;
    }
    
    @keyframes blink {
      50% {
        opacity: 1;
      }
    }
    
    /* Style pour les messages d'erreur */
    .chat-message.error .chat-content {
      background-color: #ffebee;
      color: #c62828;
    }
  </style>
</head>
<body>
  <!-- Chat App Container -->
  <div class="chat-app-container">
    <!-- Sidebar Historique -->
    <div class="chat-history-sidebar">
      <div class="sidebar-header">
        <h4>Historique des discussions</h4>
        <button class="btn-new-chat">
          <i class="fas fa-plus"></i> Nouvelle discussion
        </button>
      </div>
      <div class="history-list">
        <div class="history-item active">
          <div class="history-preview">Discussion actuelle</div>
          <div class="history-time">Aujourd'hui, {{ "now"|date("H:i") }}</div>
        </div>
        <div class="history-item">
          <div class="history-preview">Conseils pour entretien d'embauche</div>
          <div class="history-time">Hier, 14:30</div>
        </div>
        <div class="history-item">
          <div class="history-preview">Offres d'emploi en développement</div>
          <div class="history-time">Lundi, 09:45</div>
        </div>
      </div>
    </div>

    <!-- Main Chat Area -->
    <div class="main-chat-area">
      <!-- Chat Header -->
      <div class="chat-header">
        <button class="btn-toggle-sidebar">
          <i class="fas fa-history"></i>
        </button>
        <div class="chatbot-avatar">
          <i class="fas fa-robot"></i>
        </div>
        <div class="chat-title">
          <h3>Assistant Esprit</h3>
          <small>Spécialiste emploi & carrière</small>
        </div>
        <div class="status-indicator"></div>
      </div>

      <!-- Messages Container -->
      <div id="chat-area" class="chat-messages-container">
        <div class="message-container">
          <div class="chat-message bot">
            <div class="chat-content">{{ welcomeMessage }}</div>
            <div class="chat-meta">{{ "now"|date("H:i") }}</div>
          </div>
        </div>
      </div>

      <!-- Input Area -->
      <div class="chat-input-area">
        <div class="input-group">
          <input type="text" id="message-input" class="form-control" 
                 placeholder="Posez votre question sur les emplois, stages ou entretiens..." autocomplete="off">
          <button type="button" class="btn btn-send" id="send-button">
            <span class="send-text">Envoyer</span>
            <span class="spinner-border spinner-border-sm d-none" id="spinner"></span>
            <i class="fas fa-paper-plane send-icon"></i>
          </button>
        </div>
        <div class="input-footer">
          <small>Tchala répond uniquement aux questions professionnelles</small>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      console.clear(); // Nettoyer la console pour mieux voir nos logs
      console.log('DOM chargé, initialisation du chatbot...');
      
      // Récupération des éléments DOM
      const chatArea = document.getElementById('chat-area');
      const input = document.getElementById('message-input');
      const button = document.getElementById('send-button');
      
      console.log('Éléments trouvés:', {
        chatArea: !!chatArea,
        input: !!input,
        button: !!button
      });
      
      if (!button) {
        console.error('ERREUR: Le bouton d\'envoi n\'a pas été trouvé!');
        return; // Arrêter l'exécution si le bouton n'est pas trouvé
      }
      
      // Fonction pour envoyer un message
      function sendMessage() {
        console.log('Fonction sendMessage appelée');
        const message = input.value.trim();
        
        if (!message) {
          console.log('Message vide, abandon');
          return;
        }
        
        console.log('Message à envoyer:', message);
        
        // Ajouter le message de l'utilisateur au chat
        const userMessageContainer = document.createElement('div');
        userMessageContainer.className = 'message-container';
        
        const userBubble = document.createElement('div');
        userBubble.className = 'chat-message user';
        
        const userContent = document.createElement('div');
        userContent.className = 'chat-content';
        userContent.textContent = message;
        
        const userMeta = document.createElement('div');
        userMeta.className = 'chat-meta';
        userMeta.textContent = 'Vous • ' + new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
        
        userBubble.appendChild(userContent);
        userBubble.appendChild(userMeta);
        userMessageContainer.appendChild(userBubble);
        chatArea.appendChild(userMessageContainer);
        
        // Vider le champ de texte
        input.value = '';
        
        // Afficher l'indicateur de chargement
        const loadingContainer = document.createElement('div');
        loadingContainer.className = 'message-container';
        loadingContainer.id = 'loading-indicator';
        
        const loadingBubble = document.createElement('div');
        loadingBubble.className = 'chat-message bot';
        
        const loadingContent = document.createElement('div');
        loadingContent.className = 'chat-content typing-indicator';
        loadingContent.innerHTML = '<span></span><span></span><span></span>';
        
        loadingBubble.appendChild(loadingContent);
        loadingContainer.appendChild(loadingBubble);
        chatArea.appendChild(loadingContainer);
        
        // Faire défiler vers le bas
        chatArea.scrollTop = chatArea.scrollHeight;
        
        // Désactiver le bouton pendant l'envoi
        button.disabled = true;
        
        // Envoyer la requête au serveur
        fetch('{{ path('chatbot_send') }}', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
          },
          body: JSON.stringify({ message: message })
        })
        .then(response => {
          console.log('Réponse reçue, statut:', response.status);
          if (!response.ok) {
            throw new Error('Erreur serveur: ' + response.status);
          }
          return response.json();
        })
        .then(data => {
          console.log('Données reçues:', data);
          
          // Supprimer l'indicateur de chargement
          const loadingIndicator = document.getElementById('loading-indicator');
          if (loadingIndicator) {
            loadingIndicator.remove();
          }
          
          // Ajouter la réponse du bot
          const botMessageContainer = document.createElement('div');
          botMessageContainer.className = 'message-container';
          
          const botBubble = document.createElement('div');
          botBubble.className = 'chat-message bot';
          
          const botContent = document.createElement('div');
          botContent.className = 'chat-content';
          
          if (data.response) {
            botContent.innerHTML = data.response;
          } else if (data.error) {
            botContent.textContent = data.error;
          } else {
            botContent.textContent = 'Réponse vide reçue du serveur.';
          }
          
          const botMeta = document.createElement('div');
          botMeta.className = 'chat-meta';
          botMeta.textContent = 'Tchala • ' + new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
          
          botBubble.appendChild(botContent);
          botBubble.appendChild(botMeta);
          botMessageContainer.appendChild(botBubble);
          chatArea.appendChild(botMessageContainer);
          
          // Faire défiler vers le bas
          chatArea.scrollTop = chatArea.scrollHeight;
        })
        .catch(error => {
          console.error('Erreur:', error);
          
          // Supprimer l'indicateur de chargement
          const loadingIndicator = document.getElementById('loading-indicator');
          if (loadingIndicator) {
            loadingIndicator.remove();
          }
          
          // Afficher un message d'erreur
          const errorMessageContainer = document.createElement('div');
          errorMessageContainer.className = 'message-container';
          
          const errorBubble = document.createElement('div');
          errorBubble.className = 'chat-message bot error';
          
          const errorContent = document.createElement('div');
          errorContent.className = 'chat-content';
          errorContent.textContent = 'Erreur de connexion: ' + error.message + '. Veuillez réessayer.';
          
          const errorMeta = document.createElement('div');
          errorMeta.className = 'chat-meta';
          errorMeta.textContent = 'Système • ' + new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
          
          errorBubble.appendChild(errorContent);
          errorBubble.appendChild(errorMeta);
          errorMessageContainer.appendChild(errorBubble);
          chatArea.appendChild(errorMessageContainer);
          
          // Faire défiler vers le bas
          chatArea.scrollTop = chatArea.scrollHeight;
        })
        .finally(() => {
          // Réactiver le bouton
          button.disabled = false;
          // Remettre le focus sur le champ de texte
          input.focus();
        });
      }
      
      // Attacher les événements
      console.log('Attachement des événements...');
      
      // 1. Événement de clic sur le bouton
      button.addEventListener('click', function(e) {
        console.log('Bouton cliqué!');
        e.preventDefault();
        sendMessage();
      });
      
      // 2. Événement de touche Entrée dans le champ de texte
      input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          console.log('Touche Entrée pressée!');
          e.preventDefault();
          sendMessage();
        }
      });
      
      // Test pour vérifier si les événements sont bien attachés
      console.log('Test des événements:');
      console.log('- Le bouton a-t-il un gestionnaire de clic?', button.onclick !== null || button._events);
      
      // Focus sur le champ de texte au chargement
      input.focus();
      
      console.log('Initialisation du chatbot terminée!');
    });
  </script>
</body>
</html>

